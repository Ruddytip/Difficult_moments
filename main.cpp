#include <iostream>  // –î–ª—è std::cout
#include <vector>    // –î–ª—è std::vector
#include <algorithm> // –î–ª—è std::find_if

// Task 1. –ò–º–µ–µ—Ç—Å—è –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
// insert_sorted, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–µ–∫—Ç–æ—Ä –∏ –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ –∏ –≤—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ –≤
// –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –≤ –≤–µ–∫—Ç–æ—Ä–µ, —á—Ç–æ–±—ã —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω—è–ª–∞—Å—å.
// –†–µ–∞–ª–∏–∑—É–π—Ç–µ —à–∞–±–ª–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é insert_sorted, –∫–æ—Ç–æ—Ä–∞—è —Å–º–æ–∂–µ—Ç –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ª—é–±—ã–º
// –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º –ª—é–±–æ–π —Ç–∏–ø –∑–Ω–∞—á–µ–Ω–∏—è.
template <typename Container, typename Type>
void insert_sorted(Container& arr, const Type in){
    auto it = std::find_if(arr.begin(), arr.end(), [in](int i){
        return (in <= i);
    });
    arr.insert(it, in);
}

#include <iterator>

// Task 2. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –≤–µ–∫—Ç–æ—Ä a, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ 100 –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —á–∏—Å–µ–ª, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π —Å–æ–±–æ–π
// –∑–Ω–∞—á–µ–Ω–∏—è –∞–Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞. –ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ —á–∏—Å–µ–ª —Å–æ–∑–¥–∞–π—Ç–µ –¥—Ä—É–≥–æ–π –≤–µ–∫—Ç–æ—Ä —Ü–µ–ª—ã—Ö
// —á–∏—Å–µ–ª b, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π —Ü–∏—Ñ—Ä–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥—É—Ç –æ—Ç–∫–∏–Ω—É—Ç—ã –¥—Ä–æ–±–Ω—ã–µ —á–∞—Å—Ç–∏ —á–∏—Å–µ–ª.
// –í—ã–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–∏–≤—à–∏–µ—Å—è –º–∞—Å—Å–∏–≤—ã —á–∏—Å–µ–ª. –ü–æ—Å—á–∏—Ç–∞–π—Ç–µ –æ—à–∏–±–∫—É, –∫–æ—Ç–æ—Ä–æ–π –æ–±–ª–∞–¥–∞–µ—Ç —Ü–∏—Ñ—Ä–æ–≤–æ–π
// —Å–∏–≥–Ω–∞–ª –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –∞–Ω–∞–ª–æ–≥–æ–≤—ã–º –ø–æ —Ñ–æ—Ä–º—É–ª–µ:
// ùëñ=0; ùëÅ‚àí1; ‚àë (ùëéùëñ ‚àí ùëèùëñ) ^ 2
// –≥–¥–µ:
// N - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –≤–µ–∫—Ç–æ—Ä–µ,
// a - —ç–ª–µ–º–µ–Ω—Ç –≤–µ–∫—Ç–æ—Ä–∞ —Å –¥—Ä–æ–±–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏,
// b - —ç–ª–µ–º–µ–Ω—Ç –≤–µ–∫—Ç–æ—Ä–∞ —Å —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏
// –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—è —Ü–∏–∫–ª—ã.
void Task2(){
    const unsigned int SIZE = 10;
    std::vector<double> a(SIZE, 0.0);
    std::generate(a.begin(), a.end(), [](){ return double(rand()%1000)/double(10); });
    std::cout << "Arr 'a': ";
    for(const auto& it : a) std::cout << it << ", "; std::cout << std::endl;
    std::vector<int> b;
    std::copy(a.begin(), a.end(), std::back_inserter(b));
    std::cout << "Arr 'b': ";
    for(const auto& it : b) std::cout << it << ", "; std::cout << std::endl;
    std::cout << "Result:  ";
    for(auto i = 0; i < a.size(); ++i) std::cout << a[i] - b[i] << ", "; std::cout << std::endl;
}

int main(){
    
    // Task 1 ====================
    std::cout << "Task 1:" << std::endl;
    std::vector<int> array = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
    for(const auto& it : array) std::cout << it << ' '; std::cout << std::endl;
    insert_sorted(array, 5);
    for(const auto& it : array) std::cout << it << ' '; std::cout << std::endl;
    std::cout << std::endl << std::endl;
    // ===========================

    // Task 2 ====================
    std::cout << "Task 2:" << std::endl;
    Task2();
    std::cout << std::endl;
    // ===========================

    return 0;
}